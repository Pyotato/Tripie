generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x","darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  name                     String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                       String   @id @default(cuid())
  sessionToken             String   @unique @map("session_token")
  userId                   String   @map("user_id")
  expires                  DateTime
  refresh_token_expires_in Int?
  name                     String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  usedGpt       Gpt[]

  @@unique([id, image, name])
}

model VerificationToken {
  id                       Int      @id @default(autoincrement())
  identifier               String
  token                    String   @unique
  expires                  DateTime
  refresh_token_expires_in Int?
  name                     String?

  @@unique([identifier, token])
}

model Gpt {
  isAdmin      Boolean @default(false)
  usedGptToken Int     @default(0)
  userId       String  @id @map("user_id")
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
