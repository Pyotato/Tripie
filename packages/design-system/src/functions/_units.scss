@use "sass:math";
@use "sass:meta";
@use "typography" as *;

/// css 값의 단위 제거하여
/// @param {number} $value : 단위를 거할 값
/// @return {number} : 단위를 제거한 값
@function strip-unit($value) {
  @if meta.type-of($value) != "number" {
    @error "Invalid `#{meta.type-of($value)}` type. Choose a number type instead.";
  } @else if meta.type-of($value) == "number" and not math.is-unitless($value) {
    @return math.div($value, ($value * 0 + 1));
  }

  @return $value;
}

/// 픽셀 값으로부터 rem값 반환
/// @param {number} $value : 픽셀 단위의 값
/// @return {number} : rem으로 변환한 값
@function remify($value) {
  $unit: math.unit($value);
  $default-font-size: font-size("default");
  $stripped-default: strip-unit($default-font-size);

  @if $value == 0 {
    @return 0;
  }

  @if math.is-unitless($value) {
    @return math.div($value, $stripped-default) * 1rem;
  } @else if $unit == "rem" {
    @return $value;
  } @else if $unit == "px" {
    @return math.div($value, $default-font-size) * 1rem;
  } @else {
    @error "Value must be in px, rem or just a number.";
  }
}

/// 픽셀값을 em으로 변환하여 반환. font-size 변경이 없는 요소만 적용가능
/// @param {number} $value : 변환할 픽셀 값
/// @return {number} : em으로 변환한 값
@function em($value) {
  $unit: math.unit($value);
  $default-font-size: font-size("default");
  $stripped-default: strip-unit($default-font-size);

  @if $value == 0 {
    @return 0;
  }

  @if math.is-unitless($value) {
    @return math.div($value, $stripped-default) * 1em;
  }

  @if $unit == "em" {
    @return $value;
  }

  @if $unit == "px" {
    @return math.div($value, $default-font-size) * 1em;
  } @else {
    @error "Value must be in px, em or just a number.";
  }
}
